using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Wadl.Wasm
{
    public interface IEncoder
    {
        void Unreachable();
        void Nop();
        void StartBlock(WasmResultTypes resultType);
        void I64xor();
        void I64sub();
        void I64trunc_u_f32();
        void I64trunc_u_f64();
        void I64trunc_s_f64();
        void I64trunc_s_f32();
        void I64shr_u();
        void I64shr_s();
        void I64shl();
        void I64rotr();
        void I64rotl();
        void I64rem_s();
        void I64rem_u();
        void I64popcnt();
        void I64reinterpret_f64();
        void I64ne();
        void I64or();
        void I64mul();
        void I64lt_u();
        void I64lt_s();
        void I64le_u();
        void I64gt_u();
        void I64le_s();
        void I64gt_s();
        void I64ge_u();
        void I64ge_s();
        void I64extend_u_i32();
        void I64eqz();
        void I64extend_s_i32();
        void I64eq();
        void I64div_u();
        void I64div_s();
        void I64ctz();
        void I64clz();
        void I64and();
        void I32xor();
        void I64add();
        void I32sub();
        void I32wrap_i64();
        void I32trunc_s_f64();
        void I32trunc_u_f32();
        void I32trunc_u_f64();
        void I32trunc_s_f32();
        void I32shr_u();
        void I32shl();
        void I32shr_s();
        void I32rotr();
        void I32rotl();
        void I32rem_s();
        void I32rem_u();
        void I32popcnt();
        void I32reinterpret_f32();
        void I32or();
        void I32ne();
        void I32mul();
        void I32lt_u();
        void I32lt_s();
        void I32le_u();
        void I32le_s();
        void I32gt_u();
        void I32gt_s();
        void I32ge_u();
        void I32ge_s();
        void I32eq();
        void I32div_u();
        void I32div_s();
        void I32ctz();
        void I32clz();
        void I32and();
        void I32add();
        void F64trunc();
        void F64sub();
        void F64sqrt();
        void F64neg();
        void F64reinterpret_i64();
        void F64promote_f32();
        void F64nearest();
        void F64mul();
        void F64min();
        void F64max();
        void F64lt();
        void F64gt();
        void F64ge();
        void F64le();
        void F64floor();
        void F64div();
        void F64eq();
        void F32abs();
        void F64copysign();
        void F64convert_u_i64();
        void F64convert_u_i32();
        void F64convert_s_i32();
        void F64convert_s_i64();
        void F64add();
        void F64ceil();
        void F64abs();
        void F32trunc();
        void F32sub();
        void F32sqrt();
        void F32nearest();
        void F32reinterpret_i32();
        void F32neg();
        void F32ne();
        void F32min();
        void F32mul();
        void F32max();
        void F32lt();
        void F32le();
        void F32gt();
        void F32eq();
        void F32ge();
        void F32floor();
        void F32div();
        void F32demote_f64();
        void F32add();
        void F32ceil();
        void F32convert_u_i64();
        void F32copysign();
        void F32convert_s_i64();
        void F32convert_u_i32();
        void F64ne();
        void F32convert_s_i32();
        void I32eqz();
        void GrowMemory();
        void Select();
        void CurrentMemory();
        void Drop();
        void Return();
        void EndBlock();
        void F64Const(double value);
        void F32Const(float value);
        void StartLoop(WasmResultTypes resultType);
        void I64Store32(uint alignment, uint offset);
        void I64Const(ulong value);
        void I32Const(uint value);
        void I64Store16(uint alignment, uint offset);
        void I64Store8(uint alignment, uint offset);
        void I32Store16(uint alignment, uint offset);
        void I32Store8(uint alignment, uint offset);
        void F64Store(uint alignment, uint offset);
        void F32Store(uint alignment, uint offset);
        void I64Store(uint alignment, uint offset);
        void I32Store(uint alignment, uint offset);
        void I64Load32u(uint alignment, uint offset);
        void I64Load32s(uint alignment, uint offset);
        void I64Load16u(uint alignment, uint offset);
        void I64Load16s(uint alignment, uint offset);
        void I64Load8u(uint alignment, uint offset);
        void I64Load8s(uint alignment, uint offset);
        void I32Load16u(uint alignment, uint offset);
        void I32Load16s(uint alignment, uint offset);
        void I32Load8u(uint alignment, uint offset);
        void I32Load8s(uint alignment, uint offset);
        void F64Load(uint alignment, uint offset);
        void F32Load(uint alignment, uint offset);
        void I64Load(uint alignment, uint offset);
        void I32Load(uint alignment, uint offset);
        void EndLoop();
        void SetGlobal(uint globalIndex);
        void GetGlobal(uint globalIndex);
        void TeeLocal(uint localIndex);
        void SetLocal(uint localIndex);
        void GetLocal(uint localIndex);
        void StartIf(WasmResultTypes resultType);
        void CallIndirect(uint typeIndex);
        void Call(uint functionIndex);
        void BrIf(uint labelIndex);
        void EndIf();
        void Br(uint labelIndex);
        void StartElse();
        void BrTable(IEnumerable<uint> labelIndices, uint defaultLabelIndex);
    }
}
